>>> def matrix_divided(matrix, div):
...     new_matrix = []
...     if not isinstance(div, (int, float)):
...         raise TypeError('div must be a number')
...     if div == 0:
...         raise TypeError('division by zero')
...     len_row = len(matrix[0])
...     for row in matrix:
...         list_div = []
...         if len_row != len(row):
...             raise TypeError('Each row of the matrix must have the same size')
...         for item in row:
...             if not isinstance(item, (int, float)):
...                 raise TypeError('matrix must be a matrix (list of lists) of integers/floats')
...             list_div.append(round(item / div, 2))
...         new_matrix.append(list_div)
...     return new_matrix
>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
>>> matrix_divided(matrix, 15)
[[0.07, 0.13, 0.2], [0.27, 0.33, 0.4]]
>>> matrix = [
...     [1, 2, "###"],
...     [4, 5, 6]
... ]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix = [
...     [1, 2],
...     [4, 5, 6]
... ]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size
>>> matrix_divided(matrix, '50')
Traceback (most recent call last):
TypeError: div must be a number
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
TypeError: division by zero